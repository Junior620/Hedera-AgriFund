// PDF Export System
class PDFExporter {
    constructor() {
        this.init();
    }

    async init() {
        await this.loadJsPDF();
    }

    async loadJsPDF() {
        if (window.jsPDF) return;

        const script = document.createElement('script');
        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js';
        
        return new Promise((resolve) => {
            script.onload = () => {
                console.log('jsPDF loaded');
                resolve();
            };
            document.head.appendChild(script);
        });
    }

    async exportLoanReport(loanData) {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();

        // Header
        doc.setFontSize(20);
        doc.setTextColor(0, 212, 170);
        doc.text('Hedera AgriFund', 20, 20);
        doc.text('Loan Report', 20, 35);

        // Loan details
        doc.setFontSize(12);
        doc.setTextColor(0, 0, 0);
        
        let yPos = 60;
        const lineHeight = 8;

        const details = [
            ['Loan ID:', loanData.id],
            ['Borrower:', loanData.borrower],
            ['Amount:', `$${loanData.amount.toLocaleString()}`],
            ['Interest Rate:', `${loanData.interestRate}%`],
            ['Duration:', `${loanData.duration} months`],
            ['Status:', loanData.status],
            ['Collateral:', `${loanData.collateral.quantity}kg ${loanData.collateral.type}`],
            ['LTV Ratio:', `${loanData.ltv}%`],
            ['Created:', loanData.createdAt]
        ];

        details.forEach(([label, value]) => {
            doc.setFont(undefined, 'bold');
            doc.text(label, 20, yPos);
            doc.setFont(undefined, 'normal');
            doc.text(value, 80, yPos);
            yPos += lineHeight;
        });

        // Payment schedule
        if (loanData.paymentSchedule) {
            yPos += 10;
            doc.setFontSize(14);
            doc.setFont(undefined, 'bold');
            doc.text('Payment Schedule', 20, yPos);
            yPos += 10;

            doc.setFontSize(10);
            doc.text('Date', 20, yPos);
            doc.text('Amount', 60, yPos);
            doc.text('Principal', 100, yPos);
            doc.text('Interest', 140, yPos);
            doc.text('Balance', 180, yPos);
            yPos += 5;

            loanData.paymentSchedule.forEach(payment => {
                doc.text(payment.date, 20, yPos);
                doc.text(`$${payment.amount}`, 60, yPos);
                doc.text(`$${payment.principal}`, 100, yPos);
                doc.text(`$${payment.interest}`, 140, yPos);
                doc.text(`$${payment.balance}`, 180, yPos);
                yPos += 5;
            });
        }

        // Footer
        doc.setFontSize(8);
        doc.setTextColor(128, 128, 128);
        doc.text('Generated by Hedera AgriFund', 20, 280);
        doc.text(new Date().toLocaleString(), 20, 285);

        // Save
        doc.save(`loan-report-${loanData.id}.pdf`);
    }

    async exportPortfolioReport(portfolioData) {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();

        // Header
        doc.setFontSize(20);
        doc.setTextColor(0, 212, 170);
        doc.text('Hedera AgriFund', 20, 20);
        doc.text('Portfolio Report', 20, 35);

        // Portfolio summary
        doc.setFontSize(12);
        doc.setTextColor(0, 0, 0);
        
        let yPos = 60;
        const lineHeight = 8;

        const summary = [
            ['Total Invested:', `$${portfolioData.totalInvested.toLocaleString()}`],
            ['Current Value:', `$${portfolioData.currentValue.toLocaleString()}`],
            ['Total Return:', `$${portfolioData.totalReturn.toLocaleString()}`],
            ['ROI:', `${portfolioData.roi}%`],
            ['Active Investments:', portfolioData.activeInvestments],
            ['Average APR:', `${portfolioData.averageAPR}%`],
            ['Risk Score:', portfolioData.riskScore]
        ];

        summary.forEach(([label, value]) => {
            doc.setFont(undefined, 'bold');
            doc.text(label, 20, yPos);
            doc.setFont(undefined, 'normal');
            doc.text(value, 80, yPos);
            yPos += lineHeight;
        });

        // Investment breakdown
        if (portfolioData.investments) {
            yPos += 10;
            doc.setFontSize(14);
            doc.setFont(undefined, 'bold');
            doc.text('Investment Breakdown', 20, yPos);
            yPos += 10;

            doc.setFontSize(10);
            doc.text('Loan ID', 20, yPos);
            doc.text('Borrower', 60, yPos);
            doc.text('Amount', 120, yPos);
            doc.text('APR', 150, yPos);
            doc.text('Status', 180, yPos);
            yPos += 5;

            portfolioData.investments.forEach(investment => {
                doc.text(investment.loanId, 20, yPos);
                doc.text(investment.borrower, 60, yPos);
                doc.text(`$${investment.amount}`, 120, yPos);
                doc.text(`${investment.apr}%`, 150, yPos);
                doc.text(investment.status, 180, yPos);
                yPos += 5;
            });
        }

        // Footer
        doc.setFontSize(8);
        doc.setTextColor(128, 128, 128);
        doc.text('Generated by Hedera AgriFund', 20, 280);
        doc.text(new Date().toLocaleString(), 20, 285);

        // Save
        doc.save(`portfolio-report-${Date.now()}.pdf`);
    }

    async exportTokenCertificate(tokenData) {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();

        // Certificate header
        doc.setFontSize(24);
        doc.setTextColor(0, 212, 170);
        doc.text('DIGITAL ASSET CERTIFICATE', 105, 30, { align: 'center' });

        // Certificate border
        doc.setDrawColor(0, 212, 170);
        doc.setLineWidth(2);
        doc.rect(15, 15, 180, 250);

        // Token details
        doc.setFontSize(14);
        doc.setTextColor(0, 0, 0);
        
        let yPos = 70;
        const lineHeight = 12;

        doc.text('This certifies that the following agricultural asset has been', 105, yPos, { align: 'center' });
        yPos += lineHeight;
        doc.text('digitally tokenized on the Hedera blockchain:', 105, yPos, { align: 'center' });
        yPos += lineHeight * 2;

        const details = [
            ['Token ID:', tokenData.id],
            ['Crop Type:', tokenData.type.toUpperCase()],
            ['Quantity:', `${tokenData.quantity} kg`],
            ['Quality Grade:', `Grade ${tokenData.grade}`],
            ['Estimated Value:', `$${tokenData.value.toLocaleString()}`],
            ['Storage Location:', tokenData.location],
            ['Harvest Date:', tokenData.harvestDate],
            ['Expiry Date:', tokenData.expiryDate],
            ['Blockchain Hash:', tokenData.blockchainHash || 'N/A']
        ];

        details.forEach(([label, value]) => {
            doc.setFont(undefined, 'bold');
            doc.text(label, 30, yPos);
            doc.setFont(undefined, 'normal');
            doc.text(value, 100, yPos);
            yPos += lineHeight;
        });

        // Verification section
        yPos += 20;
        doc.setFontSize(12);
        doc.setFont(undefined, 'bold');
        doc.text('VERIFICATION', 105, yPos, { align: 'center' });
        yPos += 15;

        doc.setFontSize(10);
        doc.setFont(undefined, 'normal');
        doc.text('This certificate is backed by physical assets stored in certified', 105, yPos, { align: 'center' });
        yPos += 8;
        doc.text('warehouses and verified through blockchain technology.', 105, yPos, { align: 'center' });
        yPos += 8;
        doc.text('All transactions are immutable and transparent.', 105, yPos, { align: 'center' });

        // Footer
        yPos = 240;
        doc.setFontSize(8);
        doc.setTextColor(128, 128, 128);
        doc.text('Issued by Hedera AgriFund', 30, yPos);
        doc.text(`Date: ${new Date().toLocaleDateString()}`, 30, yPos + 5);
        doc.text('Powered by Hedera Hashgraph', 150, yPos);

        // Save
        doc.save(`token-certificate-${tokenData.id}.pdf`);
    }

    // Utility method to show export options
    showExportDialog(type, data) {
        const modal = document.createElement('div');
        modal.className = 'modal show';
        modal.style.display = 'flex';
        
        modal.innerHTML = `
            <div class="modal-content" style="max-width: 400px;">
                <div class="modal-header">
                    <h3><i class="fas fa-file-pdf"></i> Export PDF</h3>
                    <button class="modal-close" onclick="this.closest('.modal').remove()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Choose export format:</p>
                    <div style="display: flex; flex-direction: column; gap: 10px; margin-top: 20px;">
                        <button class="btn btn-primary" onclick="pdfExporter.export${type}Report(${JSON.stringify(data).replace(/"/g, '&quot;')}); this.closest('.modal').remove();">
                            <i class="fas fa-file-pdf"></i> Standard Report
                        </button>
                        <button class="btn btn-secondary" onclick="pdfExporter.exportDetailed${type}Report(${JSON.stringify(data).replace(/"/g, '&quot;')}); this.closest('.modal').remove();">
                            <i class="fas fa-file-alt"></i> Detailed Report
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
    }
}

// Initialize PDF exporter
document.addEventListener('DOMContentLoaded', () => {
    window.pdfExporter = new PDFExporter();
});